export const userOpts: Map<any, any>;
export const userOptsKeys: Set<string>;
export function setUserOpts(opt?: object): Promise<object>;
export namespace sidebar {
    let context: any;
    let contextualIds: any;
    let duplicatedTabs: any;
    let firstSelectedTab: any;
    let incognito: boolean;
    let isMac: boolean;
    let lastClosedTab: any;
    let pinnedObserver: any;
    let pinnedTabsWaitingToMove: any;
    let tabsWaitingToMove: any;
    let windowId: any;
}
export function setSidebar(): Promise<void>;
export function initSidebar(bool?: boolean): Promise<void>;
export function setContext(elm?: object): void;
export function setContextualIds(): Promise<void>;
export function setLastClosedTab(tab?: object): Promise<void>;
export function getLastClosedTab(): Promise<object>;
export function undoCloseTab(): Promise<Promise<any> | null>;
export function setPinnedTabsWaitingToMove(arr?: any[] | null): Promise<void>;
export function setTabsWaitingToMove(arr?: any[] | null): Promise<void>;
export function applyUserStyle(): Promise<any>;
export function applyUserCustomTheme(): Promise<Promise<any> | null>;
export function applyPinnedContainerHeight(entries: any[]): Promise<any> | null;
export function triggerDndHandler(evt: object): Function | null;
export function handleCreateNewTab(evt: object): Promise<any> | null;
export function activateClickedTab(elm: object): Promise<Promise<any> | null>;
export function handleClickedTab(evt: object): Promise<any>;
export function addTabClickListener(elm?: object): Promise<void>;
export function toggleTabDblClickListener(elm?: object, bool?: boolean): Promise<void>;
export function replaceTabDblClickListeners(bool?: boolean): Promise<any[]>;
export function triggerTabWarmup(evt: object): Promise<any> | null;
export function addTabEventListeners(elm?: object): Promise<void>;
export function handleActivatedTab(info: object): Promise<Promise<any> | null>;
export function handleCreatedTab(tabsTab: object, opt?: object): Promise<any[]>;
export function handleAttachedTab(tabId: number, info: object): Promise<Promise<any> | null>;
export function handleDetachedTab(tabId: number, info: object): Promise<void>;
export function handleHighlightedTab(info: object): Promise<any[]>;
export function handleMovedTab(tabId: number, info: object): Promise<Promise<any> | null>;
export function handleRemovedTab(tabId: number, info: object): Promise<void>;
export function handleUpdatedTab(tabId: number, info?: object, tabsTab?: object): Promise<any[]>;
export function handleClickedMenu(info: object): Promise<any[]>;
export function prepareContexualIdsMenuItems(parentId: string, cookieId?: string): Promise<any[]>;
export function prepareNewTabMenuItems(elm: object): Promise<any[]>;
export function preparePageMenuItems(opt?: object): Promise<any[]>;
export function prepareTabGroupMenuItems(elm?: object, opt?: object): Promise<any[]>;
export function prepareTabMenuItems(elm: object): Promise<any[]>;
export function handleUpdatedTheme(info?: object): Promise<Promise<any> | null>;
export function handleInitCustomThemeRequest(remove?: boolean): Promise<Promise<any> | null>;
export function handleEvt(evt: object): Promise<any>;
export function handleContextmenuEvt(evt: object): Promise<any>;
export function handleWheelEvt(evt: object): Promise<any> | null;
export function handleMsg(msg: object): Promise<any[]>;
export function requestSidebarStateUpdate(): Promise<Promise<any> | null>;
export function setStorageValue(item?: string, obj?: object, changed?: boolean): Promise<any[]>;
export function handleStorage(data?: object, area?: string, changed?: boolean): Promise<any[]>;
export function restoreHighlightedTabs(): Promise<void>;
export function restoreTabGroups(): Promise<any[]>;
export function emulateTabsInOrder(arr: any[]): Promise<void>;
export function emulateTabs(): Promise<any>;
export function setPinnedObserver(): Promise<void>;
export function setMain(): Promise<void>;
export function startup(): Promise<any>;
export { ports };
import { ports } from './port.js';
