export namespace colorname {
    let aliceblue: string;
    let antiquewhite: string;
    let aqua: string;
    let aquamarine: string;
    let azure: string;
    let beige: string;
    let bisque: string;
    let black: string;
    let blanchedalmond: string;
    let blue: string;
    let blueviolet: string;
    let brown: string;
    let burlywood: string;
    let cadetblue: string;
    let chartreuse: string;
    let chocolate: string;
    let coral: string;
    let cornflowerblue: string;
    let cornsilk: string;
    let crimson: string;
    let cyan: string;
    let darkblue: string;
    let darkcyan: string;
    let darkgoldenrod: string;
    let darkgray: string;
    let darkgreen: string;
    let darkgrey: string;
    let darkkhaki: string;
    let darkmagenta: string;
    let darkolivegreen: string;
    let darkorange: string;
    let darkorchid: string;
    let darkred: string;
    let darksalmon: string;
    let darkseagreen: string;
    let darkslateblue: string;
    let darkslategray: string;
    let darkslategrey: string;
    let darkturquoise: string;
    let darkviolet: string;
    let deeppink: string;
    let deepskyblue: string;
    let dimgray: string;
    let dimgrey: string;
    let dodgerblue: string;
    let firebrick: string;
    let floralwhite: string;
    let forestgreen: string;
    let fuchsia: string;
    let gainsboro: string;
    let ghostwhite: string;
    let gold: string;
    let goldenrod: string;
    let gray: string;
    let green: string;
    let greenyellow: string;
    let grey: string;
    let honeydew: string;
    let hotpink: string;
    let indianred: string;
    let indigo: string;
    let ivory: string;
    let khaki: string;
    let lavender: string;
    let lavenderblush: string;
    let lawngreen: string;
    let lemonchiffon: string;
    let lightblue: string;
    let lightcoral: string;
    let lightcyan: string;
    let lightgoldenrodyellow: string;
    let lightgray: string;
    let lightgreen: string;
    let lightgrey: string;
    let lightpink: string;
    let lightsalmon: string;
    let lightseagreen: string;
    let lightskyblue: string;
    let lightslategray: string;
    let lightslategrey: string;
    let lightsteelblue: string;
    let lightyellow: string;
    let lime: string;
    let limegreen: string;
    let linen: string;
    let magenta: string;
    let maroon: string;
    let mediumaquamarine: string;
    let mediumblue: string;
    let mediumorchid: string;
    let mediumpurple: string;
    let mediumseagreen: string;
    let mediumslateblue: string;
    let mediumspringgreen: string;
    let mediumturquoise: string;
    let mediumvioletred: string;
    let midnightblue: string;
    let mintcream: string;
    let mistyrose: string;
    let moccasin: string;
    let navajowhite: string;
    let navy: string;
    let oldlace: string;
    let olive: string;
    let olivedrab: string;
    let orange: string;
    let orangered: string;
    let orchid: string;
    let palegoldenrod: string;
    let palegreen: string;
    let paleturquoise: string;
    let palevioletred: string;
    let papayawhip: string;
    let peachpuff: string;
    let peru: string;
    let pink: string;
    let plum: string;
    let powderblue: string;
    let purple: string;
    let rebeccapurple: string;
    let red: string;
    let rosybrown: string;
    let royalblue: string;
    let saddlebrown: string;
    let salmon: string;
    let sandybrown: string;
    let seagreen: string;
    let seashell: string;
    let sienna: string;
    let silver: string;
    let skyblue: string;
    let slateblue: string;
    let slategray: string;
    let slategrey: string;
    let snow: string;
    let springgreen: string;
    let steelblue: string;
    let tan: string;
    let teal: string;
    let thistle: string;
    let tomato: string;
    let turquoise: string;
    let violet: string;
    let wheat: string;
    let white: string;
    let whitesmoke: string;
    let yellow: string;
    let yellowgreen: string;
}
export function validateColorComponents(arr: any[], opt?: {
    alpha?: boolean;
    minLength?: number;
    maxLength?: number;
    minRange?: number;
    maxRange?: number;
    validateRange?: boolean;
}): any[];
export function transformMatrix(mtx: Array<Array<number>>, vct: Array<number>): Array<number>;
export function numberToHexString(value: number): string;
export function angleToDeg(angle: string): number;
export function rgbToLinearRgb(rgb: Array<number>): Array<number>;
export function linearRgbToRgb(rgb: Array<number>): Array<number>;
export function rgbToXyz(rgb: Array<number>): Array<number>;
export function xyzToRgb(xyz: Array<number>): Array<number>;
export function xyzToHsl(xyz: Array<number>): Array<number>;
export function xyzToHwb(xyz: Array<number>): Array<number>;
export function xyzD50ToLab(xyz: Array<number>): Array<number>;
export function xyzD50ToLch(xyz: Array<number>): Array<number>;
export function xyzToOklab(xyz: Array<number>): Array<number>;
export function xyzToOklch(xyz: Array<number>): Array<number>;
export function hexToRgb(value: string): Array<number>;
export function hexToLinearRgb(value: string): Array<number>;
export function hexToXyz(value: string): Array<number>;
export function hexToXyzD50(value: string): Array<number>;
export function reInsertMissingComponents(value: string, color?: any[]): Array<number | string>;
export function normalizeColorComponents(colorA: any[], colorB: any[]): Array<Array<number>>;
export function parseAlpha(a?: string | null): number;
export function parseRgb(value: string): Array<number>;
export function parseHsl(value: string): Array<number>;
export function parseHwb(value: string): Array<number>;
export function parseLab(value: string): Array<number>;
export function parseLch(value: string): Array<number>;
export function parseOklab(value: string): Array<number>;
export function parseOklch(value: string): Array<number>;
export function parseColorFunc(value: string, d50?: boolean): Array<number>;
export function parseColor(value: string, d50?: boolean): Array<number>;
export function convertColorToLinearRgb(value: string, opt?: object): Array<number>;
export function convertColorToRgb(value: string, opt?: object): Array<number>;
export function convertRgbToHex(rgb: Array<number>): string;
export function convertLinearRgbToHex(rgb: any[]): string;
export function convertXyzToHex(xyz: any[]): string;
export function convertXyzD50ToHex(xyz: any[]): string;
export function convertColorToHex(value: string, opt?: {
    alpha?: boolean;
}): string | null;
export function convertColorFuncToHex(value: string, opt?: {
    alpha?: boolean;
}): string | null;
export function convertColorMixToHex(value: string, opt?: {
    alpha?: boolean;
}): string | null;
export function getColorInHex(value: string, opt?: object): (string | any[]) | null;
export function compositeLayeredColors(overlay: string, base: string): string | null;
